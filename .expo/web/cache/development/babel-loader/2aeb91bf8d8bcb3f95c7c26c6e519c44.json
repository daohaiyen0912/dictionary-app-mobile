{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport DropDownPicker from \"react-native-dropdown-picker\";\nimport transParagraphApi from \"../../Api/TransParagraphApi\";\nimport * as Speech from \"expo-speech\";\nimport { Icon } from \"react-native-elements\";\nimport \"./transParagraphScreen.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function TransParagraphScreen() {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      textInput = _React$useState2[0],\n      setTextInput = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      result = _React$useState4[0],\n      setResult = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      openTarget = _React$useState6[0],\n      setOpenTarget = _React$useState6[1];\n\n  var _React$useState7 = React.useState(),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      valueTarget = _React$useState8[0],\n      setValueTarget = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      openSource = _React$useState10[0],\n      setOpenSource = _React$useState10[1];\n\n  var _React$useState11 = React.useState(),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      valueSource = _React$useState12[0],\n      setValueSource = _React$useState12[1];\n\n  var _React$useState13 = React.useState([{\n    value: \"vi\",\n    label: \"Vietnameses\"\n  }, {\n    value: \"en\",\n    label: \"English\"\n  }, {\n    value: \"fr\",\n    label: \"French\"\n  }, {\n    value: \"ru\",\n    label: \"Russia\"\n  }, {\n    value: \"it\",\n    label: \"Italia\"\n  }, {\n    value: \"ja\",\n    label: \"Japan\"\n  }, {\n    value: \"ko\",\n    label: \"Korea\"\n  }, {\n    value: \"th\",\n    label: \"Thailand\"\n  }]),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      items = _React$useState14[0],\n      setItems = _React$useState14[1];\n\n  var handleSelectSourceLanguage = React.useCallback(function (item) {\n    setValueSource(item.value);\n  }, []);\n  var handleSelectTargetLanguage = React.useCallback(function (item) {\n    setValueTarget(item.value);\n  }, []);\n  var handleGetTextInput = React.useCallback(function (textInput) {\n    setTextInput(textInput);\n  }, []);\n  var handleTrans = React.useCallback(function (textInput, source, target) {\n    transParagraphApi.trans(textInput, source, target).then(function (response) {\n      setResult(response);\n    }).catch(function (error) {\n      console.log(\"Api call error\");\n      alert(error.message);\n    });\n  }, []);\n  var handleTextToSpeech = React.useCallback(function (text) {\n    Speech.speak(text);\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.transParagraphContainer,\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 25,\n          fontWeight: \"bold\",\n          textAlign: \"center\",\n          color: \"white\"\n        },\n        children: \"Translate paragraphs\"\n      }), _jsx(View, {\n        style: {\n          marginTop: 20,\n          alignItems: \"center\"\n        },\n        children: _jsx(Image, {\n          style: {\n            width: 70,\n            height: 70\n          },\n          source: {\n            uri: \"https://cdn-icons-png.flaticon.com/512/2452/2452150.png\"\n          }\n        })\n      }), _jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          zIndex: 100,\n          marginTop: 30\n        },\n        children: [_jsx(View, {\n          style: {\n            width: \"40%\"\n          },\n          children: _jsx(DropDownPicker, {\n            onSelectItem: handleSelectSourceLanguage,\n            open: openSource,\n            value: valueSource,\n            items: items,\n            setOpen: setOpenSource,\n            setValue: setValueSource,\n            setItems: setItems,\n            maxHeight: 120,\n            containerStyle: {\n              backgroundColor: \"#CFAB36\"\n            },\n            labelStyle: {\n              color: \"white\"\n            },\n            listItemLabelStyle: {\n              color: \"black\"\n            },\n            showArrowIcon: false\n          })\n        }), _jsx(View, {\n          style: {\n            width: \"20%\",\n            marginTop: \"10px !important\"\n          },\n          children: _jsx(Icon, {\n            size: 20,\n            name: \"language\",\n            type: \"font-awesome\",\n            tvParallaxProperties: undefined,\n            color: \"#CFAB36\",\n            style: {\n              marginTop: \"10px\"\n            }\n          })\n        }), _jsx(View, {\n          style: {\n            width: \"40%\"\n          },\n          children: _jsx(DropDownPicker, {\n            onSelectItem: handleSelectTargetLanguage,\n            open: openTarget,\n            value: valueTarget,\n            items: items,\n            setOpen: setOpenTarget,\n            setValue: setValueTarget,\n            setItems: setItems,\n            maxHeight: 120,\n            containerStyle: {\n              backgroundColor: \"#CFAB36\"\n            },\n            labelStyle: {\n              color: \"white\"\n            },\n            listItemLabelStyle: {\n              color: \"black\"\n            },\n            showArrowIcon: false\n          })\n        })]\n      }), _jsx(TextInput, {\n        placeholderTextColor: \"grey\",\n        onChangeText: handleGetTextInput,\n        style: styles.transParagraphTextInput,\n        placeholder: \"Enter paragraphs...\"\n      })]\n    }), _jsx(View, {\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleTrans(textInput, valueSource, valueTarget);\n        },\n        style: styles.buttonTrans,\n        children: _jsx(Text, {\n          style: {\n            color: \"white\"\n          },\n          children: \"Translate\"\n        })\n      })\n    }), _jsxs(View, {\n      style: styles.transParagraphResult,\n      children: [_jsx(View, {\n        children: _jsx(Text, {\n          style: {\n            fontSize: 14,\n            fontWeight: \"bold\"\n          },\n          children: result\n        })\n      }), _jsx(View, {\n        children: _jsx(Icon, {\n          size: 16,\n          raised: true,\n          name: \"play\",\n          type: \"font-awesome\",\n          onPress: function onPress() {\n            return handleTextToSpeech(result);\n          },\n          tvParallaxProperties: undefined\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#272C52\",\n    alignItems: \"center\"\n  },\n  transParagraphContainer: {\n    width: 300,\n    marginTop: 80,\n    marginBottom: 50\n  },\n  transParagraphTextInput: {\n    marginTop: 50,\n    padding: 10,\n    backgroundColor: \"white\",\n    height: 100,\n    borderRadius: 6\n  },\n  buttonTrans: {\n    padding: 10,\n    backgroundColor: \"#CFAB36\",\n    width: 100,\n    borderRadius: 15,\n    alignItems: \"center\"\n  },\n  transParagraphResult: {\n    width: 300,\n    height: 100,\n    justifyContent: \"center\",\n    padding: 10,\n    marginTop: 50,\n    marginBottom: 50,\n    backgroundColor: \"white\",\n    borderRadius: 6\n  },\n  trans: {\n    backgroundColor: \"none\",\n    padding: \"10px auto 10px auto\",\n    width: \"20%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/PC/Desktop/MobileYen/gitbash/dictionary-app/src/View/TransParagraphScreen/TransParagraphScreen.tsx"],"names":["React","DropDownPicker","transParagraphApi","Speech","Icon","TransParagraphScreen","useState","textInput","setTextInput","result","setResult","openTarget","setOpenTarget","valueTarget","setValueTarget","openSource","setOpenSource","valueSource","setValueSource","value","label","items","setItems","handleSelectSourceLanguage","useCallback","item","handleSelectTargetLanguage","handleGetTextInput","handleTrans","source","target","trans","then","response","catch","error","console","log","alert","message","handleTextToSpeech","text","speak","styles","container","transParagraphContainer","fontSize","fontWeight","textAlign","color","marginTop","alignItems","width","height","uri","flexDirection","zIndex","backgroundColor","undefined","transParagraphTextInput","buttonTrans","transParagraphResult","StyleSheet","create","flex","marginBottom","padding","borderRadius","justifyContent"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Image,\r\n} from \"react-native\";\r\nimport DropDownPicker from \"react-native-dropdown-picker\";\r\nimport transParagraphApi from \"../../Api/TransParagraphApi\";\r\nimport * as Speech from \"expo-speech\";\r\nimport { Icon } from \"react-native-elements\";\r\nimport \"./transParagraphScreen.css\";\r\n\r\nexport default function TransParagraphScreen() {\r\n  const [textInput, setTextInput] = React.useState<string>();\r\n  const [result, setResult] = React.useState<string>();\r\n\r\n  //dropdown to select language trans\r\n  const [openTarget, setOpenTarget] = React.useState(false);\r\n  const [valueTarget, setValueTarget] = React.useState<string>();\r\n  const [openSource, setOpenSource] = React.useState(false);\r\n  const [valueSource, setValueSource] = React.useState<string>();\r\n  const [items, setItems] = React.useState([\r\n    { value: \"vi\", label: \"Vietnameses\" },\r\n    { value: \"en\", label: \"English\" },\r\n    { value: \"fr\", label: \"French\" },\r\n    { value: \"ru\", label: \"Russia\" },\r\n    { value: \"it\", label: \"Italia\" },\r\n    { value: \"ja\", label: \"Japan\" },\r\n    { value: \"ko\", label: \"Korea\" },\r\n    { value: \"th\", label: \"Thailand\" },\r\n  ]);\r\n\r\n  const handleSelectSourceLanguage = React.useCallback((item) => {\r\n    setValueSource(item.value);\r\n  }, []);\r\n\r\n  const handleSelectTargetLanguage = React.useCallback((item) => {\r\n    setValueTarget(item.value);\r\n  }, []);\r\n\r\n  //trans\r\n\r\n  const handleGetTextInput = React.useCallback((textInput: string) => {\r\n    setTextInput(textInput);\r\n  }, []);\r\n\r\n  const handleTrans = React.useCallback((textInput, source, target) => {\r\n    transParagraphApi\r\n      .trans(textInput, source, target)\r\n      .then((response: any) => {\r\n        setResult(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Api call error\");\r\n        alert(error.message);\r\n      });\r\n  }, []);\r\n\r\n  const handleTextToSpeech = React.useCallback((text) => {\r\n    Speech.speak(text);\r\n  }, []);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.transParagraphContainer}>\r\n        <Text\r\n          style={{\r\n            fontSize: 25,\r\n            fontWeight: \"bold\",\r\n            textAlign: \"center\",\r\n            color: \"white\",\r\n          }}\r\n        >\r\n          Translate paragraphs\r\n        </Text>\r\n\r\n        <View style={{ marginTop: 20, alignItems: \"center\" }}>\r\n          <Image\r\n            style={{ width: 70, height: 70 }}\r\n            source={{\r\n              uri: \"https://cdn-icons-png.flaticon.com/512/2452/2452150.png\",\r\n            }}\r\n          />\r\n        </View>\r\n\r\n        <View style={{ flexDirection: \"row\", zIndex: 100, marginTop: 30 }}>\r\n          <View style={{ width: \"40%\" }}>\r\n            <DropDownPicker\r\n              onSelectItem={handleSelectSourceLanguage}\r\n              open={openSource}\r\n              value={valueSource as string}\r\n              items={items}\r\n              setOpen={setOpenSource}\r\n              setValue={setValueSource}\r\n              setItems={setItems}\r\n              maxHeight={120}\r\n              containerStyle={{\r\n                backgroundColor: \"#CFAB36\",\r\n              }}\r\n              labelStyle={{ color: \"white\" }}\r\n              listItemLabelStyle={{ color: \"black\" }}\r\n              showArrowIcon={false}\r\n              // style={{color: 'white'}}\r\n            />\r\n          </View>\r\n          <View\r\n            style={{\r\n              width: \"20%\",\r\n              marginTop: \"10px !important\",\r\n            }}\r\n          >\r\n            <Icon\r\n              size={20}\r\n              name=\"language\"\r\n              type=\"font-awesome\"\r\n              tvParallaxProperties={undefined}\r\n              color={\"#CFAB36\"}\r\n              style={{ marginTop: \"10px\" }}\r\n            />\r\n          </View>\r\n          <View style={{ width: \"40%\" }}>\r\n            <DropDownPicker\r\n              onSelectItem={handleSelectTargetLanguage}\r\n              open={openTarget}\r\n              value={valueTarget as string}\r\n              items={items}\r\n              setOpen={setOpenTarget}\r\n              setValue={setValueTarget}\r\n              setItems={setItems}\r\n              maxHeight={120}\r\n              containerStyle={{\r\n                backgroundColor: \"#CFAB36\",\r\n              }}\r\n              labelStyle={{ color: \"white\" }}\r\n              listItemLabelStyle={{ color: \"black\" }}\r\n              showArrowIcon={false}\r\n            />\r\n          </View>\r\n        </View>\r\n\r\n        <TextInput\r\n          placeholderTextColor=\"grey\"\r\n          onChangeText={handleGetTextInput}\r\n          style={styles.transParagraphTextInput}\r\n          placeholder=\"Enter paragraphs...\"\r\n        />\r\n      </View>\r\n      <View>\r\n        <TouchableOpacity\r\n          onPress={() =>\r\n            handleTrans(\r\n              textInput as string,\r\n              valueSource as string,\r\n              valueTarget as string\r\n            )\r\n          }\r\n          style={styles.buttonTrans}\r\n        >\r\n          <Text style={{ color: \"white\" }}>Translate</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <View style={styles.transParagraphResult}>\r\n        <View>\r\n          {/* <Text> {result}</Text> */}\r\n          <Text\r\n            style={{\r\n              fontSize: 14,\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            {result}\r\n          </Text>\r\n        </View>\r\n\r\n        <View>\r\n          <Icon\r\n            size={16}\r\n            raised\r\n            name=\"play\"\r\n            type=\"font-awesome\"\r\n            onPress={() => handleTextToSpeech(result)}\r\n            tvParallaxProperties={undefined}\r\n          />\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#272C52\",\r\n    alignItems: \"center\",\r\n  },\r\n  transParagraphContainer: {\r\n    width: 300,\r\n    marginTop: 80,\r\n    marginBottom: 50,\r\n  },\r\n  transParagraphTextInput: {\r\n    marginTop: 50,\r\n    padding: 10,\r\n    backgroundColor: \"white\",\r\n    height: 100,\r\n    borderRadius: 6,\r\n  },\r\n  buttonTrans: {\r\n    padding: 10,\r\n    backgroundColor: \"#CFAB36\",\r\n    width: 100,\r\n    borderRadius: 15,\r\n    alignItems: \"center\",\r\n  },\r\n  transParagraphResult: {\r\n    width: 300,\r\n    height: 100,\r\n    justifyContent: \"center\",\r\n    padding: 10,\r\n    marginTop: 50,\r\n    marginBottom: 50,\r\n    backgroundColor: \"white\",\r\n    borderRadius: 6,\r\n  },\r\n  trans: {\r\n    backgroundColor: \"none\",\r\n    padding: \"10px auto 10px auto\",\r\n    width: \"20%\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}