{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Icon } from \"react-native-elements\";\nimport wordApi from \"../../Api/WordApi\";\nimport * as Speech from \"expo-speech\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoveListSreen(props) {\n  var navigation = props.navigation;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      wordLoveList = _React$useState2[0],\n      setWordLoveList = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loveIconColor = _React$useState4[0],\n      setLoveIconColor = _React$useState4[1];\n\n  var handleTextToSpeech = React.useCallback(function (word) {\n    Speech.speak(word);\n  }, []);\n  var handleAddToFavorite = React.useCallback(function (favorite, item) {\n    setLoveIconColor(\"red\");\n  }, []);\n  var handleGotoMeaning = React.useCallback(function (value) {\n    navigation.navigate(\"WordMeaning\", {\n      text: value\n    });\n  }, []);\n  React.useEffect(function () {\n    return navigation.addListener(\"focus\", function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(wordApi.favorite().then(function (response) {\n                setWordLoveList(response);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  }, [setWordLoveList]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: {\n        marginTop: 80,\n        fontSize: 20,\n        fontWeight: \"bold\",\n        color: \"white\"\n      },\n      children: \"Your favourite words\"\n    }), _jsx(FlatList, {\n      style: styles.searchContainer,\n      data: wordLoveList,\n      renderItem: function renderItem(_ref) {\n        var _item$pronunciation;\n\n        var item = _ref.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleGotoMeaning(item.word);\n          },\n          children: _jsxs(View, {\n            style: styles.wordLoveContainer,\n            children: [_jsxs(View, {\n              style: styles.wordLoveWord,\n              children: [_jsx(Text, {\n                style: {\n                  fontWeight: \"bold\",\n                  margin: 10\n                },\n                children: item.word\n              }), _jsxs(View, {\n                style: {\n                  flexDirection: \"row\"\n                },\n                children: [_jsx(View, {\n                  style: {\n                    marginLeft: 0\n                  },\n                  children: _jsx(Icon, {\n                    size: 12,\n                    raised: true,\n                    name: \"play\",\n                    type: \"font-awesome\",\n                    onPress: function onPress() {\n                      return handleTextToSpeech(item.word);\n                    },\n                    tvParallaxProperties: undefined\n                  })\n                }), _jsx(View, {\n                  style: {\n                    marginLeft: 0\n                  },\n                  children: _jsx(Icon, {\n                    color: loveIconColor,\n                    size: 12,\n                    raised: true,\n                    name: \"heart\",\n                    type: \"font-awesome\",\n                    onPress: function onPress() {\n                      return handleAddToFavorite(item.favorite, item.word);\n                    },\n                    tvParallaxProperties: undefined\n                  })\n                })]\n              })]\n            }), _jsxs(View, {\n              style: styles.wordLoveMeaning,\n              children: [_jsxs(Text, {\n                style: {\n                  margin: 5\n                },\n                children: [\" \", item == null ? void 0 : (_item$pronunciation = item.pronunciation) == null ? void 0 : _item$pronunciation.slice(1, 20), \" \"]\n              }), _jsxs(Text, {\n                style: {\n                  margin: 5\n                },\n                children: [\" \", item == null ? void 0 : item.subMeaning, \" \"]\n              })]\n            })]\n          })\n        }, item.word);\n      },\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#272C52\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\"\n  },\n  searchContainer: {\n    width: 300,\n    marginTop: 20,\n    marginBottom: 50,\n    backgroundColor: \"white\"\n  },\n  wordLoveContainer: {\n    flex: 3,\n    flexDirection: \"row\"\n  },\n  wordLoveWord: {\n    width: \"35%\",\n    borderWidth: 1,\n    borderColor: \"#d0d2d3\",\n    flexDirection: \"column\"\n  },\n  wordLoveMeaning: {\n    width: \"65%\",\n    borderWidth: 1,\n    borderColor: \"#d0d2d3\"\n  }\n});","map":{"version":3,"sources":["C:/Users/PC/Desktop/MobileYen/gitbash/dictionary-app/src/View/LoveListScreen/LoveListScreen.tsx"],"names":["React","Icon","wordApi","Speech","LoveListSreen","props","navigation","useState","wordLoveList","setWordLoveList","loveIconColor","setLoveIconColor","handleTextToSpeech","useCallback","word","speak","handleAddToFavorite","favorite","item","handleGotoMeaning","value","navigate","text","useEffect","addListener","then","response","styles","container","marginTop","fontSize","fontWeight","color","searchContainer","wordLoveContainer","wordLoveWord","margin","flexDirection","marginLeft","undefined","wordLoveMeaning","pronunciation","slice","subMeaning","index","toString","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","marginBottom","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren } from \"react\";\r\nimport {\r\n  FlatList,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\nimport { Icon } from \"react-native-elements\";\r\nimport wordApi from \"../../Api/WordApi\";\r\nimport { Word } from \"../../Models/Word/Word\";\r\nimport * as Speech from \"expo-speech\";\r\nimport { StackScreenProps } from \"@react-navigation/stack\";\r\n\r\nexport default function LoveListSreen(\r\n  props: PropsWithChildren<LoveListScreenProps>\r\n) {\r\n  const { navigation } = props;\r\n  const [wordLoveList, setWordLoveList] = React.useState<Word[]>();\r\n  const [loveIconColor, setLoveIconColor] = React.useState<string>(\"\");\r\n\r\n  const handleTextToSpeech = React.useCallback((word) => {\r\n    Speech.speak(word);\r\n  }, []);\r\n\r\n  const handleAddToFavorite = React.useCallback((favorite, item) => {\r\n    setLoveIconColor(\"red\");\r\n    // if (item === 0) {\r\n    //   setLoveIconColor(\"red\");\r\n    // } else {\r\n    //   setLoveIconColor(\"black\");\r\n    // }\r\n  }, []);\r\n\r\n  const handleGotoMeaning = React.useCallback((value: string) => {\r\n    navigation.navigate(\"WordMeaning\", {\r\n      text: value,\r\n    });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    return navigation.addListener(\"focus\", async () => {\r\n      await wordApi.favorite().then((response: any) => {\r\n        setWordLoveList(response);\r\n      });\r\n    });\r\n  }, [setWordLoveList]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text\r\n        style={{\r\n          marginTop: 80,\r\n          fontSize: 20,\r\n          fontWeight: \"bold\",\r\n          color: \"white\",\r\n        }}\r\n      >\r\n        Your favourite words\r\n      </Text>\r\n      <FlatList\r\n        style={styles.searchContainer}\r\n        data={wordLoveList}\r\n        renderItem={({ item }) => (\r\n          <TouchableOpacity\r\n            key={item.word}\r\n            onPress={() => handleGotoMeaning(item.word as string)}\r\n          >\r\n            <View style={styles.wordLoveContainer}>\r\n              <View style={styles.wordLoveWord}>\r\n                <Text style={{ fontWeight: \"bold\", margin: 10 }}>\r\n                  {item.word}\r\n                </Text>\r\n                <View style={{ flexDirection: \"row\" }}>\r\n                  <View style={{ marginLeft: 0 }}>\r\n                    <Icon\r\n                      size={12}\r\n                      raised\r\n                      name=\"play\"\r\n                      type=\"font-awesome\"\r\n                      onPress={() => handleTextToSpeech(item.word as string)}\r\n                      tvParallaxProperties={undefined}\r\n                    />\r\n                  </View>\r\n                  <View style={{ marginLeft: 0 }}>\r\n                    <Icon\r\n                      color={loveIconColor}\r\n                      size={12}\r\n                      raised\r\n                      name=\"heart\"\r\n                      type=\"font-awesome\"\r\n                      onPress={() =>\r\n                        handleAddToFavorite(item.favorite, item.word)\r\n                      }\r\n                      tvParallaxProperties={undefined}\r\n                    />\r\n                  </View>\r\n                </View>\r\n              </View>\r\n              <View style={styles.wordLoveMeaning}>\r\n                <Text style={{ margin: 5 }}>\r\n                  {\" \"}\r\n                  {item?.pronunciation?.slice(1, 20)}{\" \"}\r\n                </Text>\r\n                <Text style={{ margin: 5 }}> {item?.subMeaning} </Text>\r\n              </View>\r\n            </View>\r\n          </TouchableOpacity>\r\n        )}\r\n        keyExtractor={(item, index) => index.toString()}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport interface LoveListScreenProps extends StackScreenProps<any> {}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#272C52\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n  searchContainer: {\r\n    width: 300,\r\n    marginTop: 20,\r\n    marginBottom: 50,\r\n    backgroundColor: \"white\",\r\n  },\r\n  wordLoveContainer: {\r\n    flex: 3,\r\n    flexDirection: \"row\",\r\n  },\r\n  wordLoveWord: {\r\n    width: \"35%\",\r\n    borderWidth: 1,\r\n    borderColor: \"#d0d2d3\",\r\n    flexDirection: \"column\",\r\n  },\r\n  wordLoveMeaning: {\r\n    width: \"65%\",\r\n    borderWidth: 1,\r\n    borderColor: \"#d0d2d3\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}