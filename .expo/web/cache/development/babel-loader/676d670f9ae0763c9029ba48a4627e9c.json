{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport wordApi from \"../../Api/WordApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function AddScreen() {\n  var speeling_data = [\"'\", \"ɪ\", \"i:\", \"ʊ\", \"u:\", \"e\", \"ə\", \"ɜ:\", \"ɒ\", \"ɔ:\", \"æ\", \"ʌ\", \"ɑ:\", \"ɪə\", \"ʊə\", \"eə\", \"eɪ\", \"ɔɪ\", \"aɪ\", \"əʊ\", \"aʊ\", \"p\", \"b\", \"t\", \"d\", \"t∫\", \"dʒ\", \"k\", \"g\", \"f\", \"v\", \"ð\", \"θ\", \"s\", \"z\", \"∫\", \"ʒ\", \"m\", \"n\", \"η\", \"l\", \"r\", \"w\", \"j\"];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      modalVisible = _React$useState2[0],\n      setModalVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      word = _React$useState4[0],\n      setWord = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      tempPronunciation = _React$useState6[0],\n      setTempPronunciation = _React$useState6[1];\n\n  var _React$useState7 = React.useState(),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      pronunciation = _React$useState8[0],\n      setPronunciation = _React$useState8[1];\n\n  var _React$useState9 = React.useState(\"\"),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      meaning1 = _React$useState10[0],\n      setMeaning1 = _React$useState10[1];\n\n  var _React$useState11 = React.useState(\"\"),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      meaning2 = _React$useState12[0],\n      setMeaning2 = _React$useState12[1];\n\n  var _React$useState13 = React.useState(\"\"),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      meaning3 = _React$useState14[0],\n      setMeaning3 = _React$useState14[1];\n\n  var _React$useState15 = React.useState(\"\"),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      synonym = _React$useState16[0],\n      setSynonym = _React$useState16[1];\n\n  var _React$useState17 = React.useState(\"\"),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      antonyms = _React$useState18[0],\n      setAntonyms = _React$useState18[1];\n\n  var split = '{\"/n\"}';\n  var meaningTotal;\n  var handleGetWord = React.useCallback(function (text) {\n    setWord(text);\n  }, []);\n  var handleGetPronunciation = React.useCallback(function (text, tempPronunciation) {\n    setTempPronunciation(tempPronunciation + text);\n    setPronunciation(\"/\" + tempPronunciation + \"/\");\n  }, [tempPronunciation, pronunciation]);\n  var handleResetPronunciation = React.useCallback(function () {\n    setTempPronunciation(\"\");\n  }, [tempPronunciation]);\n  var handleGetMeaning1 = React.useCallback(function (text) {\n    if (text) setMeaning1(\"-\" + text);\n  }, []);\n  var handleGetMeaning2 = React.useCallback(function (text) {\n    if (text) setMeaning2(split + \"-\" + text);\n  }, []);\n  var handleGetMeaning3 = React.useCallback(function (text) {\n    if (text) setMeaning3(split + \"-\" + text);\n  }, []);\n  var handleGetSynonym = React.useCallback(function (text) {\n    setSynonym(text);\n  }, []);\n  var handleGetAntonyms = React.useCallback(function (text) {\n    setAntonyms(text);\n  }, []);\n  var handleAddWord = React.useCallback(function (word, pronunciation, meaningTotal, synonym, antonyms) {\n    meaningTotal = meaning1 + meaning2 + meaning3;\n    wordApi.add(word, pronunciation, meaningTotal.slice(0, meaningTotal.length), synonym, antonyms).then(function (response) {\n      alert(\"Add Word Successfully\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  }, [word, pronunciation, meaning1, meaning2, meaning3]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.transParagraphContainer,\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 20,\n          fontWeight: \"bold\",\n          color: \"white\"\n        },\n        children: \"Add New Word\"\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Add word --\"\n        }), _jsx(TextInput, {\n          onChangeText: handleGetWord,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter word...\",\n          placeholderTextColor: \"grey\"\n        })]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Add pronunciation --\"\n        }), pronunciation && _jsx(TextInput, {\n          value: \"/\" + tempPronunciation + \"/\",\n          style: styles.transParagraphTextInput,\n          placeholderTextColor: \"grey\"\n        }), _jsx(Pressable, {\n          style: [styles.button, styles.buttonOpen],\n          onPress: function onPress() {\n            return setModalVisible(true);\n          },\n          children: _jsx(Text, {\n            style: styles.textStyle,\n            children: \"Enter your pronunciation\"\n          })\n        })]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Add meaning --\"\n        }), _jsx(TextInput, {\n          onChangeText: handleGetMeaning1,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter meaning 1...\",\n          placeholderTextColor: \"grey\"\n        }), _jsx(TextInput, {\n          onChangeText: handleGetMeaning2,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter meaning 2...\",\n          placeholderTextColor: \"grey\"\n        }), _jsx(TextInput, {\n          onChangeText: handleGetMeaning3,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter meaning 3...\",\n          placeholderTextColor: \"grey\"\n        })]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Add synonyms --\"\n        }), _jsx(TextInput, {\n          onChangeText: handleGetSynonym,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter synonyms...\",\n          placeholderTextColor: \"grey\"\n        })]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Add antonyms --\"\n        }), _jsx(TextInput, {\n          onChangeText: handleGetAntonyms,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter antonyms...\",\n          placeholderTextColor: \"grey\"\n        })]\n      }), _jsx(View, {\n        style: {\n          alignItems: \"center\"\n        },\n        children: _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleAddWord(word, pronunciation, meaningTotal, synonym, antonyms);\n          },\n          style: styles.buttonAdd,\n          children: _jsx(Text, {\n            style: {\n              color: \"white\",\n              fontWeight: \"bold\"\n            },\n            children: \"Add Word\"\n          })\n        })\n      })]\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsxs(View, {\n            style: {\n              flexDirection: \"column\"\n            },\n            children: [_jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 10).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciation);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            }), _jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 10).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciation);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            }), _jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 10).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciation);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            }), _jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 10).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciation);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            }), _jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 4).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciation);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            })]\n          }), _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              marginTop: 20\n            },\n            children: [_jsx(Pressable, {\n              style: [styles.button, styles.buttonClose],\n              onPress: function onPress() {\n                return setModalVisible(!modalVisible);\n              },\n              children: _jsx(Text, {\n                style: styles.textStyle,\n                children: \"Save\"\n              })\n            }), _jsx(Pressable, {\n              style: [styles.button, styles.buttonClose],\n              onPress: handleResetPronunciation,\n              children: _jsx(Text, {\n                style: styles.textStyle,\n                children: \"Reset\"\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#272C52\",\n    alignItems: \"center\"\n  },\n  transParagraphContainer: {\n    width: 300,\n    marginTop: 70,\n    marginBottom: 0\n  },\n  transParagraphTextInput: {\n    backgroundColor: \"white\",\n    color: \"white\",\n    height: 50,\n    padding: 10,\n    paddingLeft: 20\n  },\n  addContainer: {\n    marginTop: 10\n  },\n  addLabel: {\n    marginBottom: 5,\n    fontWeight: \"bold\",\n    fontSize: 16,\n    color: \"white\"\n  },\n  buttonAdd: {\n    marginTop: 20,\n    padding: 10,\n    backgroundColor: \"#CFAB36\",\n    width: 100,\n    borderRadius: 15,\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 250\n  },\n  modalView: {\n    height: 420,\n    width: 400,\n    margin: 20,\n    backgroundColor: \"#d6d7db\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    margin: 10\n  },\n  buttonOpen: {\n    backgroundColor: \"#CFAB36\"\n  },\n  buttonClose: {\n    width: 100,\n    backgroundColor: \"#f8d84c\"\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  },\n  pronunciationContainer: {\n    flexDirection: \"row\",\n    margin: 10\n  },\n  pronunciationButton: {\n    borderRadius: 10,\n    backgroundColor: \"white\",\n    marginRight: 5,\n    width: 30,\n    height: 40\n  },\n  pronunciationText: {\n    fontSize: 16,\n    color: \"black\",\n    textAlign: \"center\",\n    paddingTop: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/PC/Desktop/MobileYen/gitbash/dictionary-app/src/View/AddScreen/AddScreen.tsx"],"names":["React","wordApi","AddScreen","speeling_data","useState","modalVisible","setModalVisible","word","setWord","tempPronunciation","setTempPronunciation","pronunciation","setPronunciation","meaning1","setMeaning1","meaning2","setMeaning2","meaning3","setMeaning3","synonym","setSynonym","antonyms","setAntonyms","split","meaningTotal","handleGetWord","useCallback","text","handleGetPronunciation","handleResetPronunciation","handleGetMeaning1","handleGetMeaning2","handleGetMeaning3","handleGetSynonym","handleGetAntonyms","handleAddWord","add","slice","length","then","response","alert","catch","error","message","styles","container","transParagraphContainer","fontSize","fontWeight","color","addContainer","addLabel","transParagraphTextInput","button","buttonOpen","textStyle","alignItems","buttonAdd","Alert","centeredView","modalView","flexDirection","pronunciationContainer","splice","map","item","pronunciationButton","pronunciationText","marginTop","buttonClose","StyleSheet","create","flex","backgroundColor","width","marginBottom","height","padding","paddingLeft","borderRadius","textAlign","justifyContent","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","modalText","marginRight","paddingTop"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Pressable,\r\n  Modal,\r\n  Alert,\r\n} from \"react-native\";\r\n// import { RNToasty } from \"react-native-toasty\";\r\nimport wordApi from \"../../Api/WordApi\";\r\n\r\nexport default function AddScreen() {\r\n  const speeling_data = [\r\n    \"'\",\r\n    \"ɪ\",\r\n    \"i:\",\r\n    \"ʊ\",\r\n    \"u:\",\r\n    \"e\",\r\n    \"ə\",\r\n    \"ɜ:\",\r\n    \"ɒ\",\r\n    \"ɔ:\",\r\n    \"æ\",\r\n    \"ʌ\",\r\n    \"ɑ:\",\r\n    \"ɪə\",\r\n    \"ʊə\",\r\n    \"eə\",\r\n    \"eɪ\",\r\n    \"ɔɪ\",\r\n    \"aɪ\",\r\n    \"əʊ\",\r\n    \"aʊ\",\r\n    \"p\",\r\n    \"b\",\r\n    \"t\",\r\n    \"d\",\r\n    \"t∫\",\r\n    \"dʒ\",\r\n    \"k\",\r\n    \"g\",\r\n    \"f\",\r\n    \"v\",\r\n    \"ð\",\r\n    \"θ\",\r\n    \"s\",\r\n    \"z\",\r\n    \"∫\",\r\n    \"ʒ\",\r\n    \"m\",\r\n    \"n\",\r\n    \"η\",\r\n    \"l\",\r\n    \"r\",\r\n    \"w\",\r\n    \"j\",\r\n  ];\r\n\r\n  const [modalVisible, setModalVisible] = React.useState(false);\r\n  const [word, setWord] = React.useState<string>();\r\n  const [tempPronunciation, setTempPronunciation] = React.useState<string>(\"\");\r\n  const [pronunciation, setPronunciation] = React.useState<string>();\r\n  // const [oldPronunciation, setOldPronunciation] = React.useState<string>();\r\n  const [meaning1, setMeaning1] = React.useState<string>(\"\");\r\n  const [meaning2, setMeaning2] = React.useState<string>(\"\");\r\n  const [meaning3, setMeaning3] = React.useState<string>(\"\");\r\n  // const [meaning4, setMeaning4] = React.useState<string>(\"\");\r\n  // const [meaning5, setMeaning5] = React.useState<string>(\"\");\r\n  const [synonym, setSynonym] = React.useState<string>(\"\");\r\n  const [antonyms, setAntonyms] = React.useState<string>(\"\");\r\n  const split = '{\"/n\"}';\r\n  let meaningTotal: string;\r\n\r\n  const handleGetWord = React.useCallback((text) => {\r\n    setWord(text);\r\n  }, []);\r\n\r\n  const handleGetPronunciation = React.useCallback(\r\n    (text, tempPronunciation) => {\r\n      setTempPronunciation(tempPronunciation + text);\r\n      setPronunciation(\"/\" + tempPronunciation + \"/\");\r\n    },\r\n    [tempPronunciation, pronunciation]\r\n  );\r\n\r\n  const handleResetPronunciation = React.useCallback(() => {\r\n    setTempPronunciation(\"\");\r\n  }, [tempPronunciation]);\r\n\r\n  const handleGetMeaning1 = React.useCallback((text) => {\r\n    if (text) setMeaning1(\"-\" + text);\r\n  }, []);\r\n\r\n  const handleGetMeaning2 = React.useCallback((text) => {\r\n    if (text) setMeaning2(split + \"-\" + text);\r\n  }, []);\r\n\r\n  const handleGetMeaning3 = React.useCallback((text) => {\r\n    if (text) setMeaning3(split + \"-\" + text);\r\n  }, []);\r\n\r\n  const handleGetSynonym = React.useCallback((text) => {\r\n    setSynonym(text);\r\n  }, []);\r\n\r\n  const handleGetAntonyms = React.useCallback((text) => {\r\n    setAntonyms(text);\r\n  }, []);\r\n\r\n  const handleAddWord = React.useCallback(\r\n    (word, pronunciation, meaningTotal, synonym, antonyms) => {\r\n      meaningTotal = meaning1 + meaning2 + meaning3;\r\n      wordApi\r\n        .add(\r\n          word,\r\n          pronunciation,\r\n          meaningTotal.slice(0, meaningTotal.length),\r\n          synonym,\r\n          antonyms\r\n        )\r\n        .then((response: any) => {\r\n          alert(\"Add Word Successfully\");\r\n        })\r\n        .catch((error) => {\r\n          alert(error.message);\r\n        });\r\n    },\r\n    [word, pronunciation, meaning1, meaning2, meaning3]\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.transParagraphContainer}>\r\n        <Text\r\n          style={{\r\n            fontSize: 20,\r\n            fontWeight: \"bold\",\r\n            color: \"white\",\r\n          }}\r\n        >\r\n          Add New Word\r\n        </Text>\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Add word --</Text>\r\n          <TextInput\r\n            onChangeText={handleGetWord}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter word...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n        </View>\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Add pronunciation --</Text>\r\n          {pronunciation && (\r\n            <TextInput\r\n              value={\"/\" + tempPronunciation + \"/\"}\r\n              style={styles.transParagraphTextInput}\r\n              placeholderTextColor=\"grey\"\r\n            />\r\n          )}\r\n\r\n          <Pressable\r\n            style={[styles.button, styles.buttonOpen]}\r\n            onPress={() => setModalVisible(true)}\r\n          >\r\n            <Text style={styles.textStyle}>Enter your pronunciation</Text>\r\n          </Pressable>\r\n        </View>\r\n\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Add meaning --</Text>\r\n          <TextInput\r\n            onChangeText={handleGetMeaning1}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter meaning 1...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n          <TextInput\r\n            onChangeText={handleGetMeaning2}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter meaning 2...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n          <TextInput\r\n            onChangeText={handleGetMeaning3}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter meaning 3...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n          {/* <TextInput\r\n            onChangeText={handleGetMeaning4}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter meaning 4...\"\r\n            placeholderTextColor=\"grey\"\r\n          /> */}\r\n          {/* <TextInput\r\n            onChangeText={handleGetMeaning5}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter meaning 5...\"\r\n            placeholderTextColor=\"grey\"\r\n          /> */}\r\n        </View>\r\n\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Add synonyms --</Text>\r\n          <TextInput\r\n            onChangeText={handleGetSynonym}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter synonyms...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n        </View>\r\n\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Add antonyms --</Text>\r\n          <TextInput\r\n            onChangeText={handleGetAntonyms}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter antonyms...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n        </View>\r\n\r\n        <View style={{ alignItems: \"center\" }}>\r\n          <TouchableOpacity\r\n            onPress={() =>\r\n              handleAddWord(\r\n                word,\r\n                pronunciation,\r\n                meaningTotal,\r\n                synonym,\r\n                antonyms\r\n              )\r\n            }\r\n            style={styles.buttonAdd}\r\n          >\r\n            <Text style={{ color: \"white\", fontWeight: \"bold\" }}>Add Word</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => {\r\n          Alert.alert(\"Modal has been closed.\");\r\n          setModalVisible(!modalVisible);\r\n        }}\r\n      >\r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <View style={{ flexDirection: \"column\" }}>\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 10).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciation)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 10).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciation)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 10).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciation)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 10).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciation)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 4).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciation)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n            </View>\r\n            <View style={{ flexDirection: \"row\", marginTop: 20 }}>\r\n              <Pressable\r\n                style={[styles.button, styles.buttonClose]}\r\n                onPress={() => setModalVisible(!modalVisible)}\r\n              >\r\n                <Text style={styles.textStyle}>Save</Text>\r\n              </Pressable>\r\n              <Pressable\r\n                style={[styles.button, styles.buttonClose]}\r\n                onPress={handleResetPronunciation}\r\n              >\r\n                <Text style={styles.textStyle}>Reset</Text>\r\n              </Pressable>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#272C52\",\r\n    alignItems: \"center\",\r\n  },\r\n  transParagraphContainer: {\r\n    width: 300,\r\n    marginTop: 70,\r\n    marginBottom: 0,\r\n  },\r\n  transParagraphTextInput: {\r\n    backgroundColor: \"white\",\r\n    color: \"white\",\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 20,\r\n  },\r\n  addContainer: {\r\n    marginTop: 10,\r\n  },\r\n  addLabel: {\r\n    marginBottom: 5,\r\n    fontWeight: \"bold\",\r\n    fontSize: 16,\r\n    color: \"white\",\r\n  },\r\n  buttonAdd: {\r\n    marginTop: 20,\r\n    padding: 10,\r\n    backgroundColor: \"#CFAB36\",\r\n    width: 100,\r\n    borderRadius: 15,\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  // css Modal\r\n  centeredView: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: 250,\r\n  },\r\n  modalView: {\r\n    height: 420,\r\n    width: 400,\r\n    margin: 20,\r\n    backgroundColor: \"#d6d7db\",\r\n    borderRadius: 20,\r\n    padding: 35,\r\n    alignItems: \"center\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 4,\r\n    elevation: 5,\r\n  },\r\n  button: {\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    elevation: 2,\r\n    margin: 10,\r\n  },\r\n  buttonOpen: {\r\n    backgroundColor: \"#CFAB36\",\r\n  },\r\n  buttonClose: {\r\n    width: 100,\r\n    backgroundColor: \"#f8d84c\",\r\n  },\r\n  textStyle: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n  modalText: {\r\n    marginBottom: 15,\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  // pronunciation selection options\r\n  pronunciationContainer: {\r\n    flexDirection: \"row\",\r\n    margin: 10,\r\n  },\r\n  pronunciationButton: {\r\n    borderRadius: 10,\r\n    backgroundColor: \"white\",\r\n    marginRight: 5,\r\n    width: 30,\r\n    height: 40,\r\n  },\r\n  pronunciationText: {\r\n    fontSize: 16,\r\n    color: \"black\",\r\n    textAlign: \"center\",\r\n    paddingTop: 10,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}