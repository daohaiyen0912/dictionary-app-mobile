{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport wordApi from \"../../Api/WordApi\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function UpdateScreen(props) {\n  var _trans$meaning;\n\n  var speeling_data = [\"'\", \"ɪ\", \"i:\", \"ʊ\", \"u:\", \"e\", \"ə\", \"ɜ:\", \"ɒ\", \"ɔ:\", \"æ\", \"ʌ\", \"ɑ:\", \"ɪə\", \"ʊə\", \"eə\", \"eɪ\", \"ɔɪ\", \"aɪ\", \"əʊ\", \"aʊ\", \"p\", \"b\", \"t\", \"d\", \"t∫\", \"dʒ\", \"k\", \"g\", \"f\", \"v\", \"ð\", \"θ\", \"s\", \"z\", \"∫\", \"ʒ\", \"m\", \"n\", \"η\", \"l\", \"r\", \"w\", \"j\"];\n  var route = props.route,\n      navigation = props.navigation;\n  var text = route.params.text;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      modalVisible = _React$useState2[0],\n      setModalVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      trans = _React$useState4[0],\n      setTrans = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      wordUpdate = _React$useState6[0],\n      setWordUpdate = _React$useState6[1];\n\n  var _React$useState7 = React.useState(\"\"),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      tempPronunciationUpdate = _React$useState8[0],\n      setTempPronunciationUpdate = _React$useState8[1];\n\n  var _React$useState9 = React.useState(\"\"),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      pronunciationUpdate = _React$useState10[0],\n      setPronunciationUpdate = _React$useState10[1];\n\n  var _React$useState11 = React.useState(\"\"),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      synonymUpdate = _React$useState12[0],\n      setSynonymUpdate = _React$useState12[1];\n\n  var _React$useState13 = React.useState(\"\"),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      meaningTotalUpdate = _React$useState14[0],\n      setMeaningTotalUpdate = _React$useState14[1];\n\n  var _React$useState15 = React.useState(\"\"),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      antonymsUpdate = _React$useState16[0],\n      setAntonymsUpdate = _React$useState16[1];\n\n  var meaning = trans != null && trans.meaning ? trans == null ? void 0 : (_trans$meaning = trans.meaning) == null ? void 0 : _trans$meaning.split('{\"/n\"}') : [\"\"];\n  var split = '{\"/n\"}';\n\n  var _React$useState17 = React.useState(\"\"),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      meaning1Update = _React$useState18[0],\n      setMeaning1Update = _React$useState18[1];\n\n  var _React$useState19 = React.useState(\"\"),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      meaning2Update = _React$useState20[0],\n      setMeaning2Update = _React$useState20[1];\n\n  var _React$useState21 = React.useState(\"\"),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      meaning3Update = _React$useState22[0],\n      setMeaning3Update = _React$useState22[1];\n\n  var handleGetWordUpdate = React.useCallback(function (text) {\n    setWordUpdate(text);\n  }, []);\n  var handleGetPronunciation = React.useCallback(function (text, tempPronunciation) {\n    setTempPronunciationUpdate(tempPronunciation + text);\n    setPronunciationUpdate(\"/\" + tempPronunciation + \"/\");\n  }, [tempPronunciationUpdate, pronunciationUpdate]);\n  var handleResetPronunciation = React.useCallback(function () {\n    setTempPronunciationUpdate(\"\");\n  }, [tempPronunciationUpdate]);\n  var handleGetMeaning1Update = React.useCallback(function (text) {\n    if (text) setMeaning1Update(\"-\" + text);\n  }, []);\n  var handleGetMeaning2Update = React.useCallback(function (text) {\n    if (text) setMeaning2Update(split + \"-\" + text);\n  }, []);\n  var handleGetMeaning3Update = React.useCallback(function (text) {\n    if (text) setMeaning3Update(split + \"-\" + text);\n  }, []);\n  var handleGetSynonym = React.useCallback(function (text) {\n    setSynonymUpdate(text);\n  }, []);\n  var handleGetAntonyms = React.useCallback(function (text) {\n    setAntonymsUpdate(text);\n  }, []);\n  var handleUpdateWord = React.useCallback(function (oldWord, wordUpdate, pronunciationUpdate, meaning1Update, meaning2Update, meaning3Update, synonymUpdate, antonymsUpdate) {\n    setMeaningTotalUpdate(meaning1Update + meaning2Update + meaning3Update);\n    console.log(meaningTotalUpdate);\n    wordApi.update(oldWord, wordUpdate, pronunciationUpdate, meaningTotalUpdate, synonymUpdate, antonymsUpdate).then(function (response) {\n      console.log(\"Update Word Successfully\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  }, [text, wordUpdate, pronunciationUpdate, meaning1Update, meaning2Update, meaning3Update, synonymUpdate, antonymsUpdate]);\n  React.useEffect(function () {\n    var fetchData = function fetchData() {\n      wordApi.search(text).then(function (response) {\n        setTrans(response.at(0));\n      }).catch(function (error) {\n        console.log(\"Api call error\");\n        alert(error.message);\n      });\n    };\n\n    fetchData();\n    setWordUpdate(text);\n    setPronunciationUpdate(trans == null ? void 0 : trans.pronunciation);\n    setSynonymUpdate(trans == null ? void 0 : trans.synonym);\n    setAntonymsUpdate(trans == null ? void 0 : trans.antonyms);\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.transParagraphContainer,\n      children: [_jsxs(Text, {\n        style: {\n          fontSize: 20,\n          fontWeight: \"bold\"\n        },\n        children: [\"Update Word: \\\"\", text, \"\\\"\"]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Update word --\"\n        }), _jsx(TextInput, {\n          defaultValue: trans == null ? void 0 : trans.word,\n          onChangeText: handleGetWordUpdate,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter word...\",\n          placeholderTextColor: \"grey\"\n        })]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Update pronunciation --\"\n        }), _jsx(TextInput, {\n          editable: false,\n          value: tempPronunciationUpdate === \"\" ? trans == null ? void 0 : trans.pronunciation : \"/\" + tempPronunciationUpdate + \"/\",\n          style: styles.transParagraphTextInput,\n          placeholderTextColor: \"grey\"\n        }), _jsx(Pressable, {\n          style: [styles.button, styles.buttonOpen],\n          onPress: function onPress() {\n            return setModalVisible(true);\n          },\n          children: _jsx(Text, {\n            style: styles.textStyle,\n            children: \"Enter new pronunciation\"\n          })\n        })]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Update meaning --\"\n        }), _jsx(TextInput, {\n          defaultValue: meaning.at(0),\n          onChangeText: handleGetMeaning1Update,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter meaning 1...\",\n          placeholderTextColor: \"grey\"\n        }), _jsx(TextInput, {\n          defaultValue: meaning.at(1),\n          onChangeText: handleGetMeaning2Update,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter meaning 1...\",\n          placeholderTextColor: \"grey\"\n        }), _jsx(TextInput, {\n          defaultValue: meaning.at(2),\n          onChangeText: handleGetMeaning3Update,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter meaning 3...\",\n          placeholderTextColor: \"grey\"\n        })]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Update synonyms --\"\n        }), _jsx(TextInput, {\n          defaultValue: trans == null ? void 0 : trans.synonym,\n          onChangeText: handleGetSynonym,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter synonyms...\",\n          placeholderTextColor: \"grey\"\n        })]\n      }), _jsxs(View, {\n        style: styles.addContainer,\n        children: [_jsx(Text, {\n          style: styles.addLabel,\n          children: \"-- Update antonyms --\"\n        }), _jsx(TextInput, {\n          defaultValue: trans == null ? void 0 : trans.antonyms,\n          onChangeText: handleGetAntonyms,\n          style: styles.transParagraphTextInput,\n          placeholder: \"Enter antonyms...\",\n          placeholderTextColor: \"grey\"\n        })]\n      }), _jsx(View, {\n        style: {\n          alignItems: \"center\"\n        },\n        children: _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleUpdateWord(text, wordUpdate, pronunciationUpdate, meaning1Update, meaning2Update, meaning3Update, synonymUpdate, antonymsUpdate);\n          },\n          style: styles.buttonAdd,\n          children: _jsx(Text, {\n            style: {\n              color: \"white\",\n              fontWeight: \"bold\"\n            },\n            children: \"Save\"\n          })\n        })\n      })]\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsxs(View, {\n            style: {\n              flexDirection: \"column\"\n            },\n            children: [_jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 10).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciationUpdate);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            }), _jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 10).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciationUpdate);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            }), _jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 10).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciationUpdate);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            }), _jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 10).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciationUpdate);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            }), _jsx(View, {\n              style: styles.pronunciationContainer,\n              children: speeling_data.splice(0, 4).map(function (item) {\n                return _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleGetPronunciation(item, tempPronunciationUpdate);\n                  },\n                  style: styles.pronunciationButton,\n                  children: _jsx(Text, {\n                    style: styles.pronunciationText,\n                    children: item\n                  })\n                }, item);\n              })\n            })]\n          }), _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              marginTop: 20\n            },\n            children: [_jsx(Pressable, {\n              style: [styles.button, styles.buttonClose],\n              onPress: function onPress() {\n                return setModalVisible(!modalVisible);\n              },\n              children: _jsx(Text, {\n                style: styles.textStyle,\n                children: \"Save\"\n              })\n            }), _jsx(Pressable, {\n              style: [styles.button, styles.buttonClose],\n              onPress: handleResetPronunciation,\n              children: _jsx(Text, {\n                style: styles.textStyle,\n                children: \"Reset\"\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#f8d84c\",\n    alignItems: \"center\"\n  },\n  transParagraphContainer: {\n    width: 300,\n    marginTop: 70,\n    marginBottom: 0\n  },\n  transParagraphTextInput: {\n    backgroundColor: \"white\",\n    color: \"black\",\n    height: 50,\n    padding: 10,\n    paddingLeft: 20\n  },\n  addContainer: {\n    marginTop: 10\n  },\n  addLabel: {\n    marginBottom: 5,\n    fontWeight: \"bold\",\n    fontSize: 16\n  },\n  buttonAdd: {\n    marginTop: 20,\n    padding: 10,\n    backgroundColor: \"#3c3f41\",\n    width: 100,\n    borderRadius: 15,\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 250\n  },\n  modalView: {\n    height: 420,\n    width: 400,\n    margin: 20,\n    backgroundColor: \"#d6d7db\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    margin: 10\n  },\n  buttonOpen: {\n    backgroundColor: \"#3c3f41\"\n  },\n  buttonClose: {\n    width: 100,\n    backgroundColor: \"#f8d84c\"\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  },\n  pronunciationContainer: {\n    flexDirection: \"row\",\n    margin: 10\n  },\n  pronunciationButton: {\n    borderRadius: 10,\n    backgroundColor: \"white\",\n    marginRight: 5,\n    width: 30,\n    height: 40\n  },\n  pronunciationText: {\n    fontSize: 16,\n    color: \"black\",\n    textAlign: \"center\",\n    paddingTop: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/PC/Desktop/MobileYen/gitbash/dictionary-app/src/View/EditScreen/EditScreen.tsx"],"names":["React","wordApi","UpdateScreen","props","speeling_data","route","navigation","text","params","useState","modalVisible","setModalVisible","trans","setTrans","wordUpdate","setWordUpdate","tempPronunciationUpdate","setTempPronunciationUpdate","pronunciationUpdate","setPronunciationUpdate","synonymUpdate","setSynonymUpdate","meaningTotalUpdate","setMeaningTotalUpdate","antonymsUpdate","setAntonymsUpdate","meaning","split","meaning1Update","setMeaning1Update","meaning2Update","setMeaning2Update","meaning3Update","setMeaning3Update","handleGetWordUpdate","useCallback","handleGetPronunciation","tempPronunciation","handleResetPronunciation","handleGetMeaning1Update","handleGetMeaning2Update","handleGetMeaning3Update","handleGetSynonym","handleGetAntonyms","handleUpdateWord","oldWord","console","log","update","then","response","catch","error","alert","message","useEffect","fetchData","search","at","pronunciation","synonym","antonyms","styles","container","transParagraphContainer","fontSize","fontWeight","addContainer","addLabel","word","transParagraphTextInput","button","buttonOpen","textStyle","alignItems","buttonAdd","color","Alert","centeredView","modalView","flexDirection","pronunciationContainer","splice","map","item","pronunciationButton","pronunciationText","marginTop","buttonClose","StyleSheet","create","flex","backgroundColor","width","marginBottom","height","padding","paddingLeft","borderRadius","textAlign","justifyContent","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","modalText","marginRight","paddingTop"],"mappings":";AACA,OAAOA,KAAP,MAAyC,OAAzC;;;;;;;;;AAYA,OAAOC,OAAP;;;AAGA,eAAe,SAASC,YAAT,CACbC,KADa,EAEb;AAAA;;AACA,MAAMC,aAAa,GAAG,CACpB,GADoB,EAEpB,GAFoB,EAGpB,IAHoB,EAIpB,GAJoB,EAKpB,IALoB,EAMpB,GANoB,EAOpB,GAPoB,EAQpB,IARoB,EASpB,GAToB,EAUpB,IAVoB,EAWpB,GAXoB,EAYpB,GAZoB,EAapB,IAboB,EAcpB,IAdoB,EAepB,IAfoB,EAgBpB,IAhBoB,EAiBpB,IAjBoB,EAkBpB,IAlBoB,EAmBpB,IAnBoB,EAoBpB,IApBoB,EAqBpB,IArBoB,EAsBpB,GAtBoB,EAuBpB,GAvBoB,EAwBpB,GAxBoB,EAyBpB,GAzBoB,EA0BpB,IA1BoB,EA2BpB,IA3BoB,EA4BpB,GA5BoB,EA6BpB,GA7BoB,EA8BpB,GA9BoB,EA+BpB,GA/BoB,EAgCpB,GAhCoB,EAiCpB,GAjCoB,EAkCpB,GAlCoB,EAmCpB,GAnCoB,EAoCpB,GApCoB,EAqCpB,GArCoB,EAsCpB,GAtCoB,EAuCpB,GAvCoB,EAwCpB,GAxCoB,EAyCpB,GAzCoB,EA0CpB,GA1CoB,EA2CpB,GA3CoB,EA4CpB,GA5CoB,CAAtB;AA+CA,MAAQC,KAAR,GAA8BF,KAA9B,CAAQE,KAAR;AAAA,MAAeC,UAAf,GAA8BH,KAA9B,CAAeG,UAAf;AACA,MAAQC,IAAR,GAAiBF,KAAK,CAACG,MAAvB,CAAQD,IAAR;;AAEA,wBAAwCP,KAAK,CAACS,QAAN,CAAe,KAAf,CAAxC;AAAA;AAAA,MAAOC,YAAP;AAAA,MAAqBC,eAArB;;AACA,yBAA0BX,KAAK,CAACS,QAAN,EAA1B;AAAA;AAAA,MAAOG,KAAP;AAAA,MAAcC,QAAd;;AACA,yBAAoCb,KAAK,CAACS,QAAN,CAAuB,EAAvB,CAApC;AAAA;AAAA,MAAOK,UAAP;AAAA,MAAmBC,aAAnB;;AACA,yBACEf,KAAK,CAACS,QAAN,CAAuB,EAAvB,CADF;AAAA;AAAA,MAAOO,uBAAP;AAAA,MAAgCC,0BAAhC;;AAEA,yBACEjB,KAAK,CAACS,QAAN,CAAuB,EAAvB,CADF;AAAA;AAAA,MAAOS,mBAAP;AAAA,MAA4BC,sBAA5B;;AAEA,0BAA0CnB,KAAK,CAACS,QAAN,CAAuB,EAAvB,CAA1C;AAAA;AAAA,MAAOW,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,0BACErB,KAAK,CAACS,QAAN,CAAuB,EAAvB,CADF;AAAA;AAAA,MAAOa,kBAAP;AAAA,MAA2BC,qBAA3B;;AAEA,0BAA4CvB,KAAK,CAACS,QAAN,CAAuB,EAAvB,CAA5C;AAAA;AAAA,MAAOe,cAAP;AAAA,MAAuBC,iBAAvB;;AAEA,MAAMC,OAAO,GAAGd,KAAK,QAAL,IAAAA,KAAK,CAAEc,OAAP,GAAiBd,KAAjB,sCAAiBA,KAAK,CAAEc,OAAxB,qBAAiB,eAAgBC,KAAhB,CAAsB,QAAtB,CAAjB,GAAmD,CAAC,EAAD,CAAnE;AACA,MAAMA,KAAK,GAAG,QAAd;;AAEA,0BAA4C3B,KAAK,CAACS,QAAN,CAAuB,EAAvB,CAA5C;AAAA;AAAA,MAAOmB,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,0BAA4C7B,KAAK,CAACS,QAAN,CAAuB,EAAvB,CAA5C;AAAA;AAAA,MAAOqB,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,0BAA4C/B,KAAK,CAACS,QAAN,CAAuB,EAAvB,CAA5C;AAAA;AAAA,MAAOuB,cAAP;AAAA,MAAuBC,iBAAvB;;AAEA,MAAMC,mBAAmB,GAAGlC,KAAK,CAACmC,WAAN,CAAkB,UAAC5B,IAAD,EAAU;AACtDQ,IAAAA,aAAa,CAACR,IAAD,CAAb;AACD,GAF2B,EAEzB,EAFyB,CAA5B;AAIA,MAAM6B,sBAAsB,GAAGpC,KAAK,CAACmC,WAAN,CAC7B,UAAC5B,IAAD,EAAO8B,iBAAP,EAA6B;AAC3BpB,IAAAA,0BAA0B,CAACoB,iBAAiB,GAAG9B,IAArB,CAA1B;AACAY,IAAAA,sBAAsB,CAAC,MAAMkB,iBAAN,GAA0B,GAA3B,CAAtB;AACD,GAJ4B,EAK7B,CAACrB,uBAAD,EAA0BE,mBAA1B,CAL6B,CAA/B;AAQA,MAAMoB,wBAAwB,GAAGtC,KAAK,CAACmC,WAAN,CAAkB,YAAM;AACvDlB,IAAAA,0BAA0B,CAAC,EAAD,CAA1B;AACD,GAFgC,EAE9B,CAACD,uBAAD,CAF8B,CAAjC;AAIA,MAAMuB,uBAAuB,GAAGvC,KAAK,CAACmC,WAAN,CAAkB,UAAC5B,IAAD,EAAU;AAC1D,QAAIA,IAAJ,EAAUsB,iBAAiB,CAAC,MAAMtB,IAAP,CAAjB;AACX,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,MAAMiC,uBAAuB,GAAGxC,KAAK,CAACmC,WAAN,CAAkB,UAAC5B,IAAD,EAAU;AAC1D,QAAIA,IAAJ,EAAUwB,iBAAiB,CAACJ,KAAK,GAAG,GAAR,GAAcpB,IAAf,CAAjB;AACX,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,MAAMkC,uBAAuB,GAAGzC,KAAK,CAACmC,WAAN,CAAkB,UAAC5B,IAAD,EAAU;AAC1D,QAAIA,IAAJ,EAAU0B,iBAAiB,CAACN,KAAK,GAAG,GAAR,GAAcpB,IAAf,CAAjB;AACX,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,MAAMmC,gBAAgB,GAAG1C,KAAK,CAACmC,WAAN,CAAkB,UAAC5B,IAAD,EAAU;AACnDc,IAAAA,gBAAgB,CAACd,IAAD,CAAhB;AACD,GAFwB,EAEtB,EAFsB,CAAzB;AAIA,MAAMoC,iBAAiB,GAAG3C,KAAK,CAACmC,WAAN,CAAkB,UAAC5B,IAAD,EAAU;AACpDkB,IAAAA,iBAAiB,CAAClB,IAAD,CAAjB;AACD,GAFyB,EAEvB,EAFuB,CAA1B;AAIA,MAAMqC,gBAAgB,GAAG5C,KAAK,CAACmC,WAAN,CACvB,UACEU,OADF,EAEE/B,UAFF,EAGEI,mBAHF,EAIEU,cAJF,EAKEE,cALF,EAMEE,cANF,EAOEZ,aAPF,EAQEI,cARF,EASK;AACHD,IAAAA,qBAAqB,CAACK,cAAc,GAAGE,cAAjB,GAAkCE,cAAnC,CAArB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYzB,kBAAZ;AAEArB,IAAAA,OAAO,CACJ+C,MADH,CAEIH,OAFJ,EAGI/B,UAHJ,EAIII,mBAJJ,EAKII,kBALJ,EAMIF,aANJ,EAOII,cAPJ,EASGyB,IATH,CASQ,UAACC,QAAD,EAAmB;AACvBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,KAXH,EAYGI,KAZH,CAYS,UAACC,KAAD,EAAW;AAChBC,MAAAA,KAAK,CAACD,KAAK,CAACE,OAAP,CAAL;AACD,KAdH;AAeD,GA7BsB,EA8BvB,CACE/C,IADF,EAEEO,UAFF,EAGEI,mBAHF,EAIEU,cAJF,EAKEE,cALF,EAMEE,cANF,EAOEZ,aAPF,EAQEI,cARF,CA9BuB,CAAzB;AA0CAxB,EAAAA,KAAK,CAACuD,SAAN,CAAgB,YAAM;AACpB,QAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBvD,MAAAA,OAAO,CACJwD,MADH,CACUlD,IADV,EAEG0C,IAFH,CAEQ,UAACC,QAAD,EAAmB;AACvBrC,QAAAA,QAAQ,CAACqC,QAAQ,CAACQ,EAAT,CAAY,CAAZ,CAAD,CAAR;AACD,OAJH,EAKGP,KALH,CAKS,UAACC,KAAD,EAAW;AAChBN,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAM,QAAAA,KAAK,CAACD,KAAK,CAACE,OAAP,CAAL;AACD,OARH;AASD,KAVD;;AAWAE,IAAAA,SAAS;AACTzC,IAAAA,aAAa,CAACR,IAAD,CAAb;AACAY,IAAAA,sBAAsB,CAACP,KAAD,oBAACA,KAAK,CAAE+C,aAAR,CAAtB;AACAtC,IAAAA,gBAAgB,CAACT,KAAD,oBAACA,KAAK,CAAEgD,OAAR,CAAhB;AACAnC,IAAAA,iBAAiB,CAACb,KAAD,oBAACA,KAAK,CAAEiD,QAAR,CAAjB;AACD,GAjBD,EAiBG,EAjBH;AAmBA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACE,uBAApB;AAAA,iBACE,MAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,EADL;AAELC,UAAAA,UAAU,EAAE;AAFP,SADT;AAAA,sCAMiB3D,IANjB;AAAA,QADF,EASE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEuD,MAAM,CAACK,YAApB;AAAA,mBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACM,QAApB;AAAA;AAAA,UADF,EAEE,KAAC,SAAD;AACE,UAAA,YAAY,EAAExD,KAAF,oBAAEA,KAAK,CAAEyD,IADvB;AAEE,UAAA,YAAY,EAAEnC,mBAFhB;AAGE,UAAA,KAAK,EAAE4B,MAAM,CAACQ,uBAHhB;AAIE,UAAA,WAAW,EAAC,eAJd;AAKE,UAAA,oBAAoB,EAAC;AALvB,UAFF;AAAA,QATF,EAmBE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAER,MAAM,CAACK,YAApB;AAAA,mBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACM,QAApB;AAAA;AAAA,UADF,EAEE,KAAC,SAAD;AACE,UAAA,QAAQ,EAAE,KADZ;AAEE,UAAA,KAAK,EACHpD,uBAAuB,KAAK,EAA5B,GACIJ,KADJ,oBACIA,KAAK,CAAE+C,aADX,GAEI,MAAM3C,uBAAN,GAAgC,GALxC;AAOE,UAAA,KAAK,EAAE8C,MAAM,CAACQ,uBAPhB;AAQE,UAAA,oBAAoB,EAAC;AARvB,UAFF,EAaE,KAAC,SAAD;AACE,UAAA,KAAK,EAAE,CAACR,MAAM,CAACS,MAAR,EAAgBT,MAAM,CAACU,UAAvB,CADT;AAEE,UAAA,OAAO,EAAE;AAAA,mBAAM7D,eAAe,CAAC,IAAD,CAArB;AAAA,WAFX;AAAA,oBAIE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEmD,MAAM,CAACW,SAApB;AAAA;AAAA;AAJF,UAbF;AAAA,QAnBF,EAwCE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEX,MAAM,CAACK,YAApB;AAAA,mBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACM,QAApB;AAAA;AAAA,UADF,EAGE,KAAC,SAAD;AACE,UAAA,YAAY,EAAE1C,OAAO,CAACgC,EAAR,CAAW,CAAX,CADhB;AAEE,UAAA,YAAY,EAAEnB,uBAFhB;AAGE,UAAA,KAAK,EAAEuB,MAAM,CAACQ,uBAHhB;AAIE,UAAA,WAAW,EAAC,oBAJd;AAKE,UAAA,oBAAoB,EAAC;AALvB,UAHF,EAWE,KAAC,SAAD;AACE,UAAA,YAAY,EAAE5C,OAAO,CAACgC,EAAR,CAAW,CAAX,CADhB;AAEE,UAAA,YAAY,EAAElB,uBAFhB;AAGE,UAAA,KAAK,EAAEsB,MAAM,CAACQ,uBAHhB;AAIE,UAAA,WAAW,EAAC,oBAJd;AAKE,UAAA,oBAAoB,EAAC;AALvB,UAXF,EAmBE,KAAC,SAAD;AACE,UAAA,YAAY,EAAE5C,OAAO,CAACgC,EAAR,CAAW,CAAX,CADhB;AAEE,UAAA,YAAY,EAAEjB,uBAFhB;AAGE,UAAA,KAAK,EAAEqB,MAAM,CAACQ,uBAHhB;AAIE,UAAA,WAAW,EAAC,oBAJd;AAKE,UAAA,oBAAoB,EAAC;AALvB,UAnBF;AAAA,QAxCF,EAoEE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAER,MAAM,CAACK,YAApB;AAAA,mBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACM,QAApB;AAAA;AAAA,UADF,EAEE,KAAC,SAAD;AACE,UAAA,YAAY,EAAExD,KAAF,oBAAEA,KAAK,CAAEgD,OADvB;AAEE,UAAA,YAAY,EAAElB,gBAFhB;AAGE,UAAA,KAAK,EAAEoB,MAAM,CAACQ,uBAHhB;AAIE,UAAA,WAAW,EAAC,mBAJd;AAKE,UAAA,oBAAoB,EAAC;AALvB,UAFF;AAAA,QApEF,EA+EE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAER,MAAM,CAACK,YAApB;AAAA,mBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACM,QAApB;AAAA;AAAA,UADF,EAEE,KAAC,SAAD;AACE,UAAA,YAAY,EAAExD,KAAF,oBAAEA,KAAK,CAAEiD,QADvB;AAEE,UAAA,YAAY,EAAElB,iBAFhB;AAGE,UAAA,KAAK,EAAEmB,MAAM,CAACQ,uBAHhB;AAIE,UAAA,WAAW,EAAC,mBAJd;AAKE,UAAA,oBAAoB,EAAC;AALvB,UAFF;AAAA,QA/EF,EA0FE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEI,UAAAA,UAAU,EAAE;AAAd,SAAb;AAAA,kBACE,KAAC,gBAAD;AACE,UAAA,OAAO,EAAE;AAAA,mBACP9B,gBAAgB,CACdrC,IADc,EAEdO,UAFc,EAGdI,mBAHc,EAIdU,cAJc,EAKdE,cALc,EAMdE,cANc,EAOdZ,aAPc,EAQdI,cARc,CADT;AAAA,WADX;AAaE,UAAA,KAAK,EAAEsC,MAAM,CAACa,SAbhB;AAAA,oBAeE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEC,cAAAA,KAAK,EAAE,OAAT;AAAkBV,cAAAA,UAAU,EAAE;AAA9B,aAAb;AAAA;AAAA;AAfF;AADF,QA1FF;AAAA,MADF,EAgHE,KAAC,KAAD;AACE,MAAA,aAAa,EAAC,OADhB;AAEE,MAAA,WAAW,EAAE,IAFf;AAGE,MAAA,OAAO,EAAExD,YAHX;AAIE,MAAA,cAAc,EAAE,0BAAM;AACpBmE,QAAAA,KAAK,CAACxB,KAAN,CAAY,wBAAZ;AACA1C,QAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,OAPH;AAAA,gBASE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEoD,MAAM,CAACgB,YAApB;AAAA,kBACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEhB,MAAM,CAACiB,SAApB;AAAA,qBACE,MAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEC,cAAAA,aAAa,EAAE;AAAjB,aAAb;AAAA,uBACE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAElB,MAAM,CAACmB,sBAApB;AAAA,wBACG7E,aAAa,CAAC8E,MAAd,CAAqB,CAArB,EAAwB,EAAxB,EAA4BC,GAA5B,CAAgC,UAACC,IAAD,EAAU;AACzC,uBACE,KAAC,gBAAD;AACE,kBAAA,OAAO,EAAE;AAAA,2BACPhD,sBAAsB,CAACgD,IAAD,EAAOpE,uBAAP,CADf;AAAA,mBADX;AAIE,kBAAA,KAAK,EAAE8C,MAAM,CAACuB,mBAJhB;AAAA,4BAOE,KAAC,IAAD;AAAM,oBAAA,KAAK,EAAEvB,MAAM,CAACwB,iBAApB;AAAA,8BAAwCF;AAAxC;AAPF,mBAKOA,IALP,CADF;AAWD,eAZA;AADH,cADF,EAiBE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEtB,MAAM,CAACmB,sBAApB;AAAA,wBACG7E,aAAa,CAAC8E,MAAd,CAAqB,CAArB,EAAwB,EAAxB,EAA4BC,GAA5B,CAAgC,UAACC,IAAD,EAAU;AACzC,uBACE,KAAC,gBAAD;AACE,kBAAA,OAAO,EAAE;AAAA,2BACPhD,sBAAsB,CAACgD,IAAD,EAAOpE,uBAAP,CADf;AAAA,mBADX;AAIE,kBAAA,KAAK,EAAE8C,MAAM,CAACuB,mBAJhB;AAAA,4BAOE,KAAC,IAAD;AAAM,oBAAA,KAAK,EAAEvB,MAAM,CAACwB,iBAApB;AAAA,8BAAwCF;AAAxC;AAPF,mBAKOA,IALP,CADF;AAWD,eAZA;AADH,cAjBF,EAgCE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEtB,MAAM,CAACmB,sBAApB;AAAA,wBACG7E,aAAa,CAAC8E,MAAd,CAAqB,CAArB,EAAwB,EAAxB,EAA4BC,GAA5B,CAAgC,UAACC,IAAD,EAAU;AACzC,uBACE,KAAC,gBAAD;AACE,kBAAA,OAAO,EAAE;AAAA,2BACPhD,sBAAsB,CAACgD,IAAD,EAAOpE,uBAAP,CADf;AAAA,mBADX;AAIE,kBAAA,KAAK,EAAE8C,MAAM,CAACuB,mBAJhB;AAAA,4BAOE,KAAC,IAAD;AAAM,oBAAA,KAAK,EAAEvB,MAAM,CAACwB,iBAApB;AAAA,8BAAwCF;AAAxC;AAPF,mBAKOA,IALP,CADF;AAWD,eAZA;AADH,cAhCF,EA+CE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEtB,MAAM,CAACmB,sBAApB;AAAA,wBACG7E,aAAa,CAAC8E,MAAd,CAAqB,CAArB,EAAwB,EAAxB,EAA4BC,GAA5B,CAAgC,UAACC,IAAD,EAAU;AACzC,uBACE,KAAC,gBAAD;AACE,kBAAA,OAAO,EAAE;AAAA,2BACPhD,sBAAsB,CAACgD,IAAD,EAAOpE,uBAAP,CADf;AAAA,mBADX;AAIE,kBAAA,KAAK,EAAE8C,MAAM,CAACuB,mBAJhB;AAAA,4BAOE,KAAC,IAAD;AAAM,oBAAA,KAAK,EAAEvB,MAAM,CAACwB,iBAApB;AAAA,8BAAwCF;AAAxC;AAPF,mBAKOA,IALP,CADF;AAWD,eAZA;AADH,cA/CF,EA+DE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEtB,MAAM,CAACmB,sBAApB;AAAA,wBACG7E,aAAa,CAAC8E,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2BC,GAA3B,CAA+B,UAACC,IAAD,EAAU;AACxC,uBACE,KAAC,gBAAD;AACE,kBAAA,OAAO,EAAE;AAAA,2BACPhD,sBAAsB,CAACgD,IAAD,EAAOpE,uBAAP,CADf;AAAA,mBADX;AAIE,kBAAA,KAAK,EAAE8C,MAAM,CAACuB,mBAJhB;AAAA,4BAOE,KAAC,IAAD;AAAM,oBAAA,KAAK,EAAEvB,MAAM,CAACwB,iBAApB;AAAA,8BAAwCF;AAAxC;AAPF,mBAKOA,IALP,CADF;AAWD,eAZA;AADH,cA/DF;AAAA,YADF,EAgFE,MAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEJ,cAAAA,aAAa,EAAE,KAAjB;AAAwBO,cAAAA,SAAS,EAAE;AAAnC,aAAb;AAAA,uBACE,KAAC,SAAD;AACE,cAAA,KAAK,EAAE,CAACzB,MAAM,CAACS,MAAR,EAAgBT,MAAM,CAAC0B,WAAvB,CADT;AAEE,cAAA,OAAO,EAAE;AAAA,uBAAM7E,eAAe,CAAC,CAACD,YAAF,CAArB;AAAA,eAFX;AAAA,wBAIE,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAEoD,MAAM,CAACW,SAApB;AAAA;AAAA;AAJF,cADF,EAOE,KAAC,SAAD;AACE,cAAA,KAAK,EAAE,CAACX,MAAM,CAACS,MAAR,EAAgBT,MAAM,CAAC0B,WAAvB,CADT;AAEE,cAAA,OAAO,EAAElD,wBAFX;AAAA,wBAIE,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAEwB,MAAM,CAACW,SAApB;AAAA;AAAA;AAJF,cAPF;AAAA,YAhFF;AAAA;AADF;AATF,MAhHF;AAAA,IADF;AA8ND;AASD,IAAMX,MAAM,GAAG2B,UAAU,CAACC,MAAX,CAAkB;AAC/B3B,EAAAA,SAAS,EAAE;AACT4B,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTlB,IAAAA,UAAU,EAAE;AAHH,GADoB;AAM/BV,EAAAA,uBAAuB,EAAE;AACvB6B,IAAAA,KAAK,EAAE,GADgB;AAEvBN,IAAAA,SAAS,EAAE,EAFY;AAGvBO,IAAAA,YAAY,EAAE;AAHS,GANM;AAW/BxB,EAAAA,uBAAuB,EAAE;AACvBsB,IAAAA,eAAe,EAAE,OADM;AAEvBhB,IAAAA,KAAK,EAAE,OAFgB;AAGvBmB,IAAAA,MAAM,EAAE,EAHe;AAIvBC,IAAAA,OAAO,EAAE,EAJc;AAKvBC,IAAAA,WAAW,EAAE;AALU,GAXM;AAkB/B9B,EAAAA,YAAY,EAAE;AACZoB,IAAAA,SAAS,EAAE;AADC,GAlBiB;AAqB/BnB,EAAAA,QAAQ,EAAE;AACR0B,IAAAA,YAAY,EAAE,CADN;AAER5B,IAAAA,UAAU,EAAE,MAFJ;AAGRD,IAAAA,QAAQ,EAAE;AAHF,GArBqB;AA0B/BU,EAAAA,SAAS,EAAE;AACTY,IAAAA,SAAS,EAAE,EADF;AAETS,IAAAA,OAAO,EAAE,EAFA;AAGTJ,IAAAA,eAAe,EAAE,SAHR;AAITC,IAAAA,KAAK,EAAE,GAJE;AAKTK,IAAAA,YAAY,EAAE,EALL;AAMTC,IAAAA,SAAS,EAAE,QANF;AAOTzB,IAAAA,UAAU,EAAE,QAPH;AAQT0B,IAAAA,cAAc,EAAE;AARP,GA1BoB;AAsC/BtB,EAAAA,YAAY,EAAE;AACZa,IAAAA,IAAI,EAAE,CADM;AAEZS,IAAAA,cAAc,EAAE,QAFJ;AAGZ1B,IAAAA,UAAU,EAAE,QAHA;AAIZa,IAAAA,SAAS,EAAE;AAJC,GAtCiB;AA4C/BR,EAAAA,SAAS,EAAE;AACTgB,IAAAA,MAAM,EAAE,GADC;AAETF,IAAAA,KAAK,EAAE,GAFE;AAGTQ,IAAAA,MAAM,EAAE,EAHC;AAITT,IAAAA,eAAe,EAAE,SAJR;AAKTM,IAAAA,YAAY,EAAE,EALL;AAMTF,IAAAA,OAAO,EAAE,EANA;AAOTtB,IAAAA,UAAU,EAAE,QAPH;AAQT4B,IAAAA,WAAW,EAAE,MARJ;AASTC,IAAAA,YAAY,EAAE;AACZV,MAAAA,KAAK,EAAE,CADK;AAEZE,MAAAA,MAAM,EAAE;AAFI,KATL;AAaTS,IAAAA,aAAa,EAAE,IAbN;AAcTC,IAAAA,YAAY,EAAE,CAdL;AAeTC,IAAAA,SAAS,EAAE;AAfF,GA5CoB;AA6D/BnC,EAAAA,MAAM,EAAE;AACN2B,IAAAA,YAAY,EAAE,EADR;AAENF,IAAAA,OAAO,EAAE,EAFH;AAGNU,IAAAA,SAAS,EAAE,CAHL;AAINL,IAAAA,MAAM,EAAE;AAJF,GA7DuB;AAmE/B7B,EAAAA,UAAU,EAAE;AACVoB,IAAAA,eAAe,EAAE;AADP,GAnEmB;AAsE/BJ,EAAAA,WAAW,EAAE;AACXK,IAAAA,KAAK,EAAE,GADI;AAEXD,IAAAA,eAAe,EAAE;AAFN,GAtEkB;AA0E/BnB,EAAAA,SAAS,EAAE;AACTG,IAAAA,KAAK,EAAE,OADE;AAETV,IAAAA,UAAU,EAAE,MAFH;AAGTiC,IAAAA,SAAS,EAAE;AAHF,GA1EoB;AA+E/BQ,EAAAA,SAAS,EAAE;AACTb,IAAAA,YAAY,EAAE,EADL;AAETK,IAAAA,SAAS,EAAE;AAFF,GA/EoB;AAqF/BlB,EAAAA,sBAAsB,EAAE;AACtBD,IAAAA,aAAa,EAAE,KADO;AAEtBqB,IAAAA,MAAM,EAAE;AAFc,GArFO;AAyF/BhB,EAAAA,mBAAmB,EAAE;AACnBa,IAAAA,YAAY,EAAE,EADK;AAEnBN,IAAAA,eAAe,EAAE,OAFE;AAGnBgB,IAAAA,WAAW,EAAE,CAHM;AAInBf,IAAAA,KAAK,EAAE,EAJY;AAKnBE,IAAAA,MAAM,EAAE;AALW,GAzFU;AAgG/BT,EAAAA,iBAAiB,EAAE;AACjBrB,IAAAA,QAAQ,EAAE,EADO;AAEjBW,IAAAA,KAAK,EAAE,OAFU;AAGjBuB,IAAAA,SAAS,EAAE,QAHM;AAIjBU,IAAAA,UAAU,EAAE;AAJK;AAhGY,CAAlB,CAAf","sourcesContent":["import { StackScreenProps } from \"@react-navigation/stack\";\r\nimport React, { PropsWithChildren } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Pressable,\r\n  Modal,\r\n  Alert,\r\n} from \"react-native\";\r\n// import { RNToasty } from \"react-native-toasty\";\r\nimport wordApi from \"../../Api/WordApi\";\r\nimport { Word } from \"../../Models/Word/Word\";\r\n\r\nexport default function UpdateScreen(\r\n  props: PropsWithChildren<UpdateScreenProps>\r\n) {\r\n  const speeling_data = [\r\n    \"'\",\r\n    \"ɪ\",\r\n    \"i:\",\r\n    \"ʊ\",\r\n    \"u:\",\r\n    \"e\",\r\n    \"ə\",\r\n    \"ɜ:\",\r\n    \"ɒ\",\r\n    \"ɔ:\",\r\n    \"æ\",\r\n    \"ʌ\",\r\n    \"ɑ:\",\r\n    \"ɪə\",\r\n    \"ʊə\",\r\n    \"eə\",\r\n    \"eɪ\",\r\n    \"ɔɪ\",\r\n    \"aɪ\",\r\n    \"əʊ\",\r\n    \"aʊ\",\r\n    \"p\",\r\n    \"b\",\r\n    \"t\",\r\n    \"d\",\r\n    \"t∫\",\r\n    \"dʒ\",\r\n    \"k\",\r\n    \"g\",\r\n    \"f\",\r\n    \"v\",\r\n    \"ð\",\r\n    \"θ\",\r\n    \"s\",\r\n    \"z\",\r\n    \"∫\",\r\n    \"ʒ\",\r\n    \"m\",\r\n    \"n\",\r\n    \"η\",\r\n    \"l\",\r\n    \"r\",\r\n    \"w\",\r\n    \"j\",\r\n  ];\r\n\r\n  const { route, navigation } = props;\r\n  const { text } = route.params;\r\n\r\n  const [modalVisible, setModalVisible] = React.useState(false);\r\n  const [trans, setTrans] = React.useState<Word>();\r\n  const [wordUpdate, setWordUpdate] = React.useState<string>(\"\");\r\n  const [tempPronunciationUpdate, setTempPronunciationUpdate] =\r\n    React.useState<string>(\"\");\r\n  const [pronunciationUpdate, setPronunciationUpdate] =\r\n    React.useState<string>(\"\");\r\n  const [synonymUpdate, setSynonymUpdate] = React.useState<string>(\"\");\r\n  const [meaningTotalUpdate, setMeaningTotalUpdate] =\r\n    React.useState<string>(\"\");\r\n  const [antonymsUpdate, setAntonymsUpdate] = React.useState<string>(\"\");\r\n\r\n  const meaning = trans?.meaning ? trans?.meaning?.split('{\"/n\"}') : [\"\"];\r\n  const split = '{\"/n\"}';\r\n\r\n  const [meaning1Update, setMeaning1Update] = React.useState<string>(\"\");\r\n  const [meaning2Update, setMeaning2Update] = React.useState<string>(\"\");\r\n  const [meaning3Update, setMeaning3Update] = React.useState<string>(\"\");\r\n\r\n  const handleGetWordUpdate = React.useCallback((text) => {\r\n    setWordUpdate(text);\r\n  }, []);\r\n\r\n  const handleGetPronunciation = React.useCallback(\r\n    (text, tempPronunciation) => {\r\n      setTempPronunciationUpdate(tempPronunciation + text);\r\n      setPronunciationUpdate(\"/\" + tempPronunciation + \"/\");\r\n    },\r\n    [tempPronunciationUpdate, pronunciationUpdate]\r\n  );\r\n\r\n  const handleResetPronunciation = React.useCallback(() => {\r\n    setTempPronunciationUpdate(\"\");\r\n  }, [tempPronunciationUpdate]);\r\n\r\n  const handleGetMeaning1Update = React.useCallback((text) => {\r\n    if (text) setMeaning1Update(\"-\" + text);\r\n  }, []);\r\n\r\n  const handleGetMeaning2Update = React.useCallback((text) => {\r\n    if (text) setMeaning2Update(split + \"-\" + text);\r\n  }, []);\r\n\r\n  const handleGetMeaning3Update = React.useCallback((text) => {\r\n    if (text) setMeaning3Update(split + \"-\" + text);\r\n  }, []);\r\n\r\n  const handleGetSynonym = React.useCallback((text) => {\r\n    setSynonymUpdate(text);\r\n  }, []);\r\n\r\n  const handleGetAntonyms = React.useCallback((text) => {\r\n    setAntonymsUpdate(text);\r\n  }, []);\r\n\r\n  const handleUpdateWord = React.useCallback(\r\n    (\r\n      oldWord,\r\n      wordUpdate,\r\n      pronunciationUpdate,\r\n      meaning1Update,\r\n      meaning2Update,\r\n      meaning3Update,\r\n      synonymUpdate,\r\n      antonymsUpdate\r\n    ) => {\r\n      setMeaningTotalUpdate(meaning1Update + meaning2Update + meaning3Update);\r\n      console.log(meaningTotalUpdate);\r\n\r\n      wordApi\r\n        .update(\r\n          oldWord,\r\n          wordUpdate,\r\n          pronunciationUpdate,\r\n          meaningTotalUpdate,\r\n          synonymUpdate,\r\n          antonymsUpdate\r\n        )\r\n        .then((response: any) => {\r\n          console.log(\"Update Word Successfully\")\r\n        })\r\n        .catch((error) => {\r\n          alert(error.message);\r\n        });\r\n    },\r\n    [\r\n      text,\r\n      wordUpdate,\r\n      pronunciationUpdate,\r\n      meaning1Update,\r\n      meaning2Update,\r\n      meaning3Update,\r\n      synonymUpdate,\r\n      antonymsUpdate,\r\n    ]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      wordApi\r\n        .search(text)\r\n        .then((response: any) => {\r\n          setTrans(response.at(0));\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Api call error\");\r\n          alert(error.message);\r\n        });\r\n    };\r\n    fetchData();\r\n    setWordUpdate(text as string);\r\n    setPronunciationUpdate(trans?.pronunciation as string);\r\n    setSynonymUpdate(trans?.synonym as string);\r\n    setAntonymsUpdate(trans?.antonyms as string);\r\n  }, []);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.transParagraphContainer}>\r\n        <Text\r\n          style={{\r\n            fontSize: 20,\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          Update Word: \"{text}\"\r\n        </Text>\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Update word --</Text>\r\n          <TextInput\r\n            defaultValue={trans?.word}\r\n            onChangeText={handleGetWordUpdate}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter word...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n        </View>\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Update pronunciation --</Text>\r\n          <TextInput\r\n            editable={false}\r\n            value={\r\n              tempPronunciationUpdate === \"\"\r\n                ? trans?.pronunciation\r\n                : \"/\" + tempPronunciationUpdate + \"/\"\r\n            }\r\n            style={styles.transParagraphTextInput}\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n\r\n          <Pressable\r\n            style={[styles.button, styles.buttonOpen]}\r\n            onPress={() => setModalVisible(true)}\r\n          >\r\n            <Text style={styles.textStyle}>Enter new pronunciation</Text>\r\n          </Pressable>\r\n        </View>\r\n\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Update meaning --</Text>\r\n\r\n          <TextInput\r\n            defaultValue={meaning.at(0)}\r\n            onChangeText={handleGetMeaning1Update}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter meaning 1...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n\r\n          <TextInput\r\n            defaultValue={meaning.at(1)}\r\n            onChangeText={handleGetMeaning2Update}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter meaning 1...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n\r\n          <TextInput\r\n            defaultValue={meaning.at(2)}\r\n            onChangeText={handleGetMeaning3Update}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter meaning 3...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n        </View>\r\n\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Update synonyms --</Text>\r\n          <TextInput\r\n            defaultValue={trans?.synonym}\r\n            onChangeText={handleGetSynonym}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter synonyms...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n        </View>\r\n\r\n        <View style={styles.addContainer}>\r\n          <Text style={styles.addLabel}>-- Update antonyms --</Text>\r\n          <TextInput\r\n            defaultValue={trans?.antonyms}\r\n            onChangeText={handleGetAntonyms}\r\n            style={styles.transParagraphTextInput}\r\n            placeholder=\"Enter antonyms...\"\r\n            placeholderTextColor=\"grey\"\r\n          />\r\n        </View>\r\n\r\n        <View style={{ alignItems: \"center\" }}>\r\n          <TouchableOpacity\r\n            onPress={() =>\r\n              handleUpdateWord(\r\n                text,\r\n                wordUpdate,\r\n                pronunciationUpdate,\r\n                meaning1Update,\r\n                meaning2Update,\r\n                meaning3Update,\r\n                synonymUpdate,\r\n                antonymsUpdate\r\n              )\r\n            }\r\n            style={styles.buttonAdd}\r\n          >\r\n            <Text style={{ color: \"white\", fontWeight: \"bold\" }}>Save</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => {\r\n          Alert.alert(\"Modal has been closed.\");\r\n          setModalVisible(!modalVisible);\r\n        }}\r\n      >\r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <View style={{ flexDirection: \"column\" }}>\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 10).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciationUpdate)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 10).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciationUpdate)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 10).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciationUpdate)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 10).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciationUpdate)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n\r\n              <View style={styles.pronunciationContainer}>\r\n                {speeling_data.splice(0, 4).map((item) => {\r\n                  return (\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        handleGetPronunciation(item, tempPronunciationUpdate)\r\n                      }\r\n                      style={styles.pronunciationButton}\r\n                      key={item}\r\n                    >\r\n                      <Text style={styles.pronunciationText}>{item}</Text>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n            </View>\r\n            <View style={{ flexDirection: \"row\", marginTop: 20 }}>\r\n              <Pressable\r\n                style={[styles.button, styles.buttonClose]}\r\n                onPress={() => setModalVisible(!modalVisible)}\r\n              >\r\n                <Text style={styles.textStyle}>Save</Text>\r\n              </Pressable>\r\n              <Pressable\r\n                style={[styles.button, styles.buttonClose]}\r\n                onPress={handleResetPronunciation}\r\n              >\r\n                <Text style={styles.textStyle}>Reset</Text>\r\n              </Pressable>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport interface UpdateScreenParams {\r\n  text: string;\r\n}\r\n\r\nexport interface UpdateScreenProps\r\n  extends StackScreenProps<Record<string, UpdateScreenParams>> {}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#f8d84c\",\r\n    alignItems: \"center\",\r\n  },\r\n  transParagraphContainer: {\r\n    width: 300,\r\n    marginTop: 70,\r\n    marginBottom: 0,\r\n  },\r\n  transParagraphTextInput: {\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 20,\r\n  },\r\n  addContainer: {\r\n    marginTop: 10,\r\n  },\r\n  addLabel: {\r\n    marginBottom: 5,\r\n    fontWeight: \"bold\",\r\n    fontSize: 16,\r\n  },\r\n  buttonAdd: {\r\n    marginTop: 20,\r\n    padding: 10,\r\n    backgroundColor: \"#3c3f41\",\r\n    width: 100,\r\n    borderRadius: 15,\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  // css Modal\r\n  centeredView: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: 250,\r\n  },\r\n  modalView: {\r\n    height: 420,\r\n    width: 400,\r\n    margin: 20,\r\n    backgroundColor: \"#d6d7db\",\r\n    borderRadius: 20,\r\n    padding: 35,\r\n    alignItems: \"center\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 4,\r\n    elevation: 5,\r\n  },\r\n  button: {\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    elevation: 2,\r\n    margin: 10,\r\n  },\r\n  buttonOpen: {\r\n    backgroundColor: \"#3c3f41\",\r\n  },\r\n  buttonClose: {\r\n    width: 100,\r\n    backgroundColor: \"#f8d84c\",\r\n  },\r\n  textStyle: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n  modalText: {\r\n    marginBottom: 15,\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  // pronunciation selection options\r\n  pronunciationContainer: {\r\n    flexDirection: \"row\",\r\n    margin: 10,\r\n  },\r\n  pronunciationButton: {\r\n    borderRadius: 10,\r\n    backgroundColor: \"white\",\r\n    marginRight: 5,\r\n    width: 30,\r\n    height: 40,\r\n  },\r\n  pronunciationText: {\r\n    fontSize: 16,\r\n    color: \"black\",\r\n    textAlign: \"center\",\r\n    paddingTop: 10,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}